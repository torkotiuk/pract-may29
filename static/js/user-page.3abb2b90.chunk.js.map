{"version":3,"sources":["Components/TableGrid/TableGrid.jsx","pages/User.jsx"],"names":["useStyles1","makeStyles","theme","root","flexShrink","marginLeft","spacing","TablePaginationActions","props","classes","useTheme","count","page","rowsPerPage","onChangePage","className","IconButton","onClick","event","disabled","aria-label","direction","Math","ceil","max","createData","name","calories","fat","rows","sort","a","b","useStyles2","table","minWidth","CustomPaginationActionsTable","React","useState","setPage","setRowsPerPage","emptyRows","min","length","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","slice","map","row","scope","style","width","height","colSpan","TableFooter","TablePagination","rowsPerPageOptions","label","value","SelectProps","inputProps","native","newPage","onChangeRowsPerPage","parseInt","target","ActionsComponent","User","Component"],"mappings":"2WAmBMA,EAAaC,aAAW,SAAAC,GAAK,MAAK,CACtCC,KAAM,CACJC,WAAY,EACZC,WAAYH,EAAMI,QAAQ,UAI9B,SAASC,EAAuBC,GAC9B,IAAMC,EAAUT,IACVE,EAAQQ,cACNC,EAA2CH,EAA3CG,MAAOC,EAAoCJ,EAApCI,KAAMC,EAA8BL,EAA9BK,YAAaC,EAAiBN,EAAjBM,aAkBlC,OACE,sBAAKC,UAAWN,EAAQN,KAAxB,UACE,cAACa,EAAA,EAAD,CACEC,QAnB6B,SAAAC,GACjCJ,EAAaI,EAAO,IAmBhBC,SAAmB,IAATP,EACVQ,aAAW,aAHb,SAKuB,QAApBlB,EAAMmB,UAAsB,cAAC,IAAD,IAAmB,cAAC,IAAD,MAElD,cAACL,EAAA,EAAD,CACEC,QAtBwB,SAAAC,GAC5BJ,EAAaI,EAAON,EAAO,IAsBvBO,SAAmB,IAATP,EACVQ,aAAW,gBAHb,SAKuB,QAApBlB,EAAMmB,UACL,cAAC,IAAD,IAEA,cAAC,IAAD,MAGJ,cAACL,EAAA,EAAD,CACEC,QA7BwB,SAAAC,GAC5BJ,EAAaI,EAAON,EAAO,IA6BvBO,SAAUP,GAAQU,KAAKC,KAAKZ,EAAQE,GAAe,EACnDO,aAAW,YAHb,SAKuB,QAApBlB,EAAMmB,UACL,cAAC,IAAD,IAEA,cAAC,IAAD,MAGJ,cAACL,EAAA,EAAD,CACEC,QApC4B,SAAAC,GAChCJ,EAAaI,EAAOI,KAAKE,IAAI,EAAGF,KAAKC,KAAKZ,EAAQE,GAAe,KAoC7DM,SAAUP,GAAQU,KAAKC,KAAKZ,EAAQE,GAAe,EACnDO,aAAW,YAHb,SAKuB,QAApBlB,EAAMmB,UAAsB,cAAC,IAAD,IAAoB,cAAC,IAAD,SAazD,SAASI,EAAWC,EAAMC,EAAUC,GAClC,MAAO,CAAEF,OAAMC,WAAUC,OAG3B,IAAMC,EAAO,CACXJ,EAAW,UAAW,IAAK,KAC3BA,EAAW,QAAS,IAAK,IACzBA,EAAW,SAAU,IAAK,IAC1BA,EAAW,iBAAkB,IAAK,GAClCA,EAAW,cAAe,IAAK,IAC/BA,EAAW,YAAa,IAAK,KAC7BA,EAAW,qBAAsB,IAAK,GACtCA,EAAW,aAAc,IAAK,GAC9BA,EAAW,SAAU,IAAK,IAC1BA,EAAW,WAAY,IAAK,IAC5BA,EAAW,cAAe,IAAK,GAC/BA,EAAW,SAAU,IAAK,IAC1BA,EAAW,OAAQ,IAAK,KACxBK,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEJ,SAAWK,EAAEL,UAAY,EAAI,KAE3CM,EAAahC,YAAW,CAC5BiC,MAAO,CACLC,SAAU,OAIC,SAASC,IACtB,IAAM3B,EAAUwB,IAChB,EAAwBI,IAAMC,SAAS,GAAvC,mBAAO1B,EAAP,KAAa2B,EAAb,KACA,EAAsCF,IAAMC,SAAS,GAArD,mBAAOzB,EAAP,KAAoB2B,EAApB,KAEMC,EACJ5B,EAAcS,KAAKoB,IAAI7B,EAAagB,EAAKc,OAAS/B,EAAOC,GAW3D,OACE,cAAC+B,EAAA,EAAD,CAAgBC,UAAWC,IAA3B,SACE,eAACC,EAAA,EAAD,CAAOhC,UAAWN,EAAQyB,MAAOd,aAAW,0BAA5C,UACE,cAAC4B,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,mBACA,cAACA,EAAA,EAAD,CAAWC,MAAM,QAAjB,uBACA,cAACD,EAAA,EAAD,CAAWC,MAAM,QAAjB,wBAGJ,eAACC,EAAA,EAAD,YACIvC,EAAc,EACZgB,EAAKwB,MAAMzC,EAAOC,EAAaD,EAAOC,EAAcA,GACpDgB,GACFyB,KAAI,SAAAC,GAAG,OACP,eAACN,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWL,UAAU,KAAKW,MAAM,MAAhC,SACGD,EAAI7B,OAEP,cAACwB,EAAA,EAAD,CAAWO,MAAO,CAAEC,MAAO,KAAOP,MAAM,QAAxC,SACGI,EAAI5B,WAEP,cAACuB,EAAA,EAAD,CAAWO,MAAO,CAAEC,MAAO,KAAOP,MAAM,QAAxC,SACGI,EAAI3B,QARM2B,EAAI7B,SAapBe,EAAY,GACX,cAACQ,EAAA,EAAD,CAAUQ,MAAO,CAAEE,OAAQ,GAAKlB,GAAhC,SACE,cAACS,EAAA,EAAD,CAAWU,QAAS,SAI1B,cAACC,EAAA,EAAD,UACE,cAACZ,EAAA,EAAD,UACE,cAACa,EAAA,EAAD,CACEC,mBAAoB,CAAC,EAAG,GAAI,GAAI,CAAEC,MAAO,MAAOC,OAAQ,IACxDL,QAAS,EACTjD,MAAOkB,EAAKc,OACZ9B,YAAaA,EACbD,KAAMA,EACNsD,YAAa,CACXC,WAAY,CAAE,aAAc,iBAC5BC,QAAQ,GAEVtD,aAvDa,SAACI,EAAOmD,GAC/B9B,EAAQ8B,IAuDEC,oBApDoB,SAAApD,GAC9BsB,EAAe+B,SAASrD,EAAMsD,OAAOP,MAAO,KAC5C1B,EAAQ,IAmDEkC,iBAAkBlE,a,ICxL1BmE,E,4JACJ,WACE,OAAO,cAAC,EAAD,Q,GAFQC,aAMJD","file":"static/js/user-page.3abb2b90.chunk.js","sourcesContent":["import React from 'react';\r\nimport TableHead from '@material-ui/core/TableHead';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\n\r\nconst useStyles1 = makeStyles(theme => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}));\r\n\r\nfunction TablePaginationActions(props) {\r\n  const classes = useStyles1();\r\n  const theme = useTheme();\r\n  const { count, page, rowsPerPage, onChangePage } = props;\r\n\r\n  const handleFirstPageButtonClick = event => {\r\n    onChangePage(event, 0);\r\n  };\r\n\r\n  const handleBackButtonClick = event => {\r\n    onChangePage(event, page - 1);\r\n  };\r\n\r\n  const handleNextButtonClick = event => {\r\n    onChangePage(event, page + 1);\r\n  };\r\n\r\n  const handleLastPageButtonClick = event => {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleBackButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"previous page\"\r\n      >\r\n        {theme.direction === 'rtl' ? (\r\n          <KeyboardArrowRight />\r\n        ) : (\r\n          <KeyboardArrowLeft />\r\n        )}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === 'rtl' ? (\r\n          <KeyboardArrowLeft />\r\n        ) : (\r\n          <KeyboardArrowRight />\r\n        )}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"last page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction createData(name, calories, fat) {\r\n  return { name, calories, fat };\r\n}\r\n\r\nconst rows = [\r\n  createData('Cupcake', 305, 3.7),\r\n  createData('Donut', 452, 25.0),\r\n  createData('Eclair', 262, 16.0),\r\n  createData('Frozen yoghurt', 159, 6.0),\r\n  createData('Gingerbread', 356, 16.0),\r\n  createData('Honeycomb', 408, 3.2),\r\n  createData('Ice cream sandwich', 237, 9.0),\r\n  createData('Jelly Bean', 375, 0.0),\r\n  createData('KitKat', 518, 26.0),\r\n  createData('Lollipop', 392, 0.2),\r\n  createData('Marshmallow', 318, 0),\r\n  createData('Nougat', 360, 19.0),\r\n  createData('Oreo', 437, 18.0),\r\n].sort((a, b) => (a.calories < b.calories ? -1 : 1));\r\n\r\nconst useStyles2 = makeStyles({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n});\r\n\r\nexport default function CustomPaginationActionsTable() {\r\n  const classes = useStyles2();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const emptyRows =\r\n    rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = event => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"custom pagination table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Name</TableCell>\r\n            <TableCell align=\"right\">Last Name</TableCell>\r\n            <TableCell align=\"right\">Email</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {(rowsPerPage > 0\r\n            ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n            : rows\r\n          ).map(row => (\r\n            <TableRow key={row.name}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.name}\r\n              </TableCell>\r\n              <TableCell style={{ width: 160 }} align=\"right\">\r\n                {row.calories}\r\n              </TableCell>\r\n              <TableCell style={{ width: 160 }} align=\"right\">\r\n                {row.fat}\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n\r\n          {emptyRows > 0 && (\r\n            <TableRow style={{ height: 53 * emptyRows }}>\r\n              <TableCell colSpan={6} />\r\n            </TableRow>\r\n          )}\r\n        </TableBody>\r\n        <TableFooter>\r\n          <TableRow>\r\n            <TablePagination\r\n              rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\r\n              colSpan={3}\r\n              count={rows.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              SelectProps={{\r\n                inputProps: { 'aria-label': 'rows per page' },\r\n                native: true,\r\n              }}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n              ActionsComponent={TablePaginationActions}\r\n            />\r\n          </TableRow>\r\n        </TableFooter>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport TableGrid from '../Components/TableGrid';\r\n\r\nclass User extends Component {\r\n  render() {\r\n    return <TableGrid />;\r\n  }\r\n}\r\n\r\nexport default User;\r\n"],"sourceRoot":""}